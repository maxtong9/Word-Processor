/*This is the SPRING 2017 TERM PROJECT
created by:*/
#include <iostream>
#include <string>
#include <iomanip>
#include <fstream>
#include <cstdlib>
#include <vector>
using namespace std;
//Function Prototypes
void menu1();
void menu2();
void openFileExist();
void openFileNew();
void quitProgram();
void substitute();
void copy();
void locate();
void delet();
void move();
void type();
void paste();
void insert();
void replace();
void goToLine();
void save();
void printAll();

//Global variables which can be used throughout all functions
const int SIZE = 100;
string lineData[SIZE]; //Array indexes are 0-99
int currentLine = 0; //Current line 0-99 to correspond with the array
string tempStorage[SIZE]; //Temporary storage area for copy & paste
int numLinesCP = 0; //Temporary Number of lines to be used between copy and paste
string fileName; //Name of the file the program will work with.

int main ()
{
	for (int i = 0; i < SIZE; i++)//Purpose is to define all array values to test to see the output.
	{
		lineData[i] = "";
	}
	//Here is where the program actually starts
	int men1choice,
		men2status = 1,
		men1status = 1;

	char men2choice;//menu choice/status variables
	cout << "Welcome to the word editor. " <<endl << endl; //Beginning welcome message

	while (men1status != 0)
	{
		menu1();//call to menu1

		cin >> men1choice; //user input menu choice
		while (men1choice != 1 && men1choice != 2 && men1choice != 3) //Makes sure menu choice is within range.
		{
			static int flag = 0;
			cout << "\aERROR: Please enter a valid option. ";
			cin >> men1choice;
			flag++;
			if (flag > 10)
			{
				cout << endl << "\a\a\aERROR:Program failiure. Please restart the program. "; //Bug fix to prevent infinite loop when character is entered
				exit(0);
			}
		}
		//Initiates appropriate call to function based upon menu 1 choice
		if (men1choice == 1)
		{
			openFileNew();

		}
 
		else if (men1choice == 2)
		{
			openFileExist();

		}
		else if (men1choice == 3)
		{
				quitProgram();
		}


		//Assuming user did not quit program with choice 3
		do
		{
			menu2(); //displays menu 2
			cin >> men2choice;
			//Range check *ADD*
			switch (men2choice)
			{
				case 's':
				case 'S': substitute();
					break;
				case 'c':
				case 'C': copy();
					break;
				case 'l':
				case 'L': locate();
					break;
				case 'D':
				case 'd': delet();
				break;
				case 'm':
				case 'M': move();
					break;
				case 't':
				case 'T': type();
					break;
				case 'p':
				case 'P': paste();
					break;
				case 'i': 
				case 'I': insert();
					break;
				case 'r':
				case 'R': replace();
					break;
				case 'q':
				case 'Q': quitProgram();
				case 'g':
				case 'G': goToLine();
					break;
				case 'V': 
				case 'v': save();
					break;
				case 'n':
				case 'N': printAll();
					break;
					men2status = 0;		  
					break;
				default: cout << "Please Enter a valid Character. ";
			}
		}while (men2status != 0);
	}
}

void substitute ()
{
	int pos = 0;
	string oldstr = "";
	string newstr = "";
	cout <<"substitute function\n";
	cout << "The current line is line " << (currentLine+1) << ". \n" << lineData[currentLine] << endl;
	cin.ignore(100, '\n');
	cout << "Type the word or phrase you would like to substitute in the current line: ";
	getline (cin, oldstr);
	int flag = lineData[currentLine].find(oldstr, 0);
	cin.ignore(100, '\n');
	if (flag == -1)
		cout << "Sorry, the word or phrase you entered does not appear on the current line. ";
	else
	{
		cout << "\nType the new word or phrase you would like to substitute in the line: ";
		getline (cin, newstr);
		while (pos != -1)
		{
			pos = lineData[currentLine].find(oldstr, 0);
			if (pos!= -1)
				lineData[currentLine].replace(pos, oldstr.size(), newstr);		
		}
	cout << (currentLine+1)<< ". " << lineData[currentLine];
	}
}
void printAll()
{
	for (int i = 0; i < SIZE; i++)
	{
		cout << (i + 1) << ". " << lineData[i] << endl;
	}
}
void copy ()
{
	for (int i = 0; i < SIZE; i++)
	{
		tempStorage[i] = "";
	}
	 numLinesCP = 0;
	cout << "COPY FUNCTION\n";
	cout << "Current line: Line " << currentLine + 1 << ". How many lines would you like to copy? ";
	cin >> numLinesCP;
	while ((numLinesCP < 0 || (((SIZE) - (currentLine +1)) + 1 < numLinesCP)))
	{
		
		if (numLinesCP < 0)
		{
			cout << "Please enter a positive number of lines. ";
			cin >> numLinesCP;
		}
		else 
		{
			cout << "There are not enough lines past the current line to copy. \nPlease enter the amount of lines you would like to copy. ";
			cin >> numLinesCP;
		}

	}
	for ( int i = 0, r = currentLine; (i < numLinesCP && r < SIZE); i++, r++)
	{
		tempStorage[i] = lineData[r];
	}


}
void locate ()
{
	int flag = -1;
	string locate = "";
	cout << "Locate function\n";
	cout << "which word or phrase would you like to locate the line of? ";
	cin.ignore(100, '\n');
	getline (cin, locate);
	for (int i = currentLine; (i < SIZE && flag == -1); i++)
	{
		flag = lineData[i].find(locate, 0);
		if (flag != -1)
		{
			currentLine = i;
			cout << "The word or phrase, "<< locate << ", is located on line " << (currentLine+1) << ". \nThe current line is now line " << (currentLine+1) << ". ";
			cout << endl << lineData[currentLine];
		}
	}
	if (flag == -1)
	{
		cout << "The word or phrase you entered does not occur in the document after the current line. ";
		cout << "The current line is " << (currentLine+1) << ". ";
	}



}
void delet ()
{
	int numLines = 0;
	cout << "Delete function \n";
	cout << "How many lines would you like to delete? ";
	cin >> numLines;
	while (numLines < 0)
	{
		cout << "Please enter a positive number for the amount of lines you would like to delete. ";
		cin >> numLines;
	}
	for (int i = currentLine, r = 0; (i < 100 && r < numLines); i++, r++)
	{
		lineData[i] = "";
		currentLine = (i + 1);
	}
}
void move()
{
	//Prompt the user to enter the number of lines they would like to move down.
	int lineChoice;
	cout << "How many lines would you like to move down? ";
	cin >> lineChoice;

	while (lineChoice <= 0)
	{
		cout << "\aERROR. Please input a positive number of lines to print. ";
		cin >> lineChoice;
	}
	cout << "-----------------------------"<< endl;
	for (int i = currentLine, r = 0; (i < SIZE && r < lineChoice && lineData[i] != ""); i++, r++)
	{
		cout << i + 1 << ". " << lineData[i];
		cout << endl;
		currentLine = i;
		if (lineData[i+1] == "")
			cout << "Next Line does not exist. Use the insert function to create new lines. ";
	}
	cout <<  "-----------------------------" << endl;
	cout << "The current line is now line " << (currentLine + 1) << endl;
}
void type()
{
	cout << "\nTYPE:\n";
	char var; //holds small menu variable
	int numLines; //holds how many lines to edit
	cout << "The current line is line " << (currentLine + 1) << ". How many lines would you like to see? ";
	cin >> numLines;
	while (numLines <= 0)
	{
		cout <<"Please enter a positive number of lines. ";
		cin >>numLines;
	}
	for (int i = currentLine, r = 0; (i < SIZE && r < numLines); i++, r++)
	{
		cout << i + 1 << ". ";
		cout << lineData[i] << endl;
		currentLine = i;
	}	
}
void paste ()
{
	cout << "Paste Function\n";
	for (int i = 0, r = currentLine; i < numLinesCP && r < SIZE; i++, r++)
	{
		lineData[r] = tempStorage[i];
	}
}
void insert ()
{
	char letter; //holds choice for next prompt
	cout << "INSERT:\n\n";
	cout << "You are currently on line " << (currentLine + 1) << ". Inserting lines over existing lines will overwrite existing lines. Would you like to change the current line? Y: Yes\tN: No (inserting a number, or any other letter (other than Y) will continue) ";
	cin >> letter;
	switch (letter)
	{
		case 'y': 
		case 'Y': goToLine();
			break;
	}
	int var; //holds how many lines will be "added" to the array/eventually file
	cout << "How many lines would you like to insert? ";
	cin >> var;
	while (var <=0)
	{
		cout << "Please enter a positive number for the number of lines. ";
		cin >> var;
	}
	cin.ignore(100, '\n');
	for (int i = (currentLine), r = 0; (r < var && i < SIZE); i++, r++)
	{
		cout << (i+1) << ". ";
		getline (cin, lineData[i]);
		currentLine = i;
	}
}
void replace()
{
	int numLines;
	int lineNum[100];
	cout << "Replace function\n";
	cout << "The current line is line " << (currentLine + 1) << ". ";
	cout << "How many lines would you like to replace? This includes the current line. ";
	cin >> numLines;
	while (numLines < 0)
	{
		cout << "Please enter a positive number for the number of lines you would like to replace. ";
		cin >> numLines;
	}
	cout << "Please enter the line numbers you wish to use as replacements. Press enter after each line number. ";
	for (int i = 0; i < numLines; i++)
	{
		cin >> lineNum[i];
		lineNum[i]--;
	}
	for (int i = currentLine, r = 0; (i < 100 && r < numLines); i++, r++)
	{
		lineData[i] = lineData[lineNum[r]];
		lineData[lineNum[r]] = "";
		currentLine = i;
	}

}
void goToLine()
{
	int line; //holds user input of line variable before conversion to array
	cout << "Which Line would you like to go to? ";
	cin >> line;
	while (!(line >= 1 && line <= 100))
	{
		cout << "Please enter a line between 1-100 ";
		cin >> line;
	}

	currentLine = (line-1);
}
void save()
{
	cout << "SAVE FUNCTION:"<< endl;
	ofstream saveFile(fileName.c_str());
	
	for (int i = 0; i < SIZE && !(saveFile.eof()); i++)
	{
		saveFile << lineData[i];
		saveFile << '\n';

	}

	saveFile.close();
}





void openFileExist()
{

	cout << "open existing File function\n";
	ifstream existFile;
	cout << "Please enter the name and location of the file in the appropriate format: ";
	cin.ignore(100, '\n');
	getline(cin, fileName);
	existFile.open(fileName.c_str());
	while (existFile.fail())
	{
		cout << "FILE OPEN ERROR\nThe file name and Location you entered does not exist. Please check the filename and location you entered: \"";
		cout << fileName << "\", and retype the name and location of the file you would like to open. ";
		getline (cin, fileName);
		existFile.open(fileName.c_str());
	}
for (int i = 0; (i < SIZE && !existFile.eof()); i++)
{
	getline(existFile, lineData[i]);
	if (existFile.eof())
	{
		cout << "The end of the file you opened has been reached. The file contains " << (i+1) << "lines. the current line is line " << (i+1) << ". ";
		currentLine = i;
	}
}
existFile.close();
}
void openFileNew()
{
	cout << "open new file function\n";
	cout << "Please enter the name & location of the file you would like to create. If you open an existing file, the data on the file will be cleared. ";
	cin.ignore(100, '\n');
	getline(cin, fileName);
}
void quitProgram()
{
	cout << "Quit Program function. will be loaded function.\n ";
	exit(1);
}
void menu1 ()
{
	cout << "What would you like to do? Please enter a number: \n";
	cout << "1. Create a New Document" << endl;
	cout << "2. Process an Existing Document" << endl;
	cout << "3. Quit" << endl;
}

void menu2()
{
	cout << endl << "What would you like to do? \nPlease enter a";
	cout << " character for your choice: " << endl << endl;
	cout << setw(40) << left << "S: Substitute/oldstring/newstring" << "C: Copy" << endl;
	cout << setw(40) << "L: Locate/String" << "D: Delete" << endl;
	cout << setw(40) << "M: Move" << "T: Type" << endl;
	cout << setw(40) << "P: Paste" << "I: Insert" << endl;
	cout << setw(40) << "R: Replace" << "G: Go to Line #" << endl;
	cout << setw(40) << "V: Save" << "Q: Quit" << endl;
	cout << setw(40) << "N: Print All 100 Lines. " << endl;
}


		
